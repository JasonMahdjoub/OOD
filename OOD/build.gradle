/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.1/userguide/java_library_plugin.html
 */

// Apply the java-library plugin to add support for Java Library
apply plugin: 'java-library'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

def Properties props = new Properties()
def propFile = file('gradle.properties')
def artifactory_Url="https://artifactory.distri-mind.fr/artifactory"
def user=""
def pwd=""
if (propFile.canRead())
{
    props.load(new FileInputStream(propFile))

    if (props!=null && props.containsKey('jdk'))
    {
		compileJava.options.fork = true
		compileJava.options.forkOptions.executable = "${jdk}/bin/javac"
		compileJava.options.bootClasspath=fileTree(include: ['*.jar'], dir: "${jdk}/jre/lib").join(File.pathSeparator)
		compileJava.options.extensionDirs = "${jdk}/jre/lib/ext/"
	
		compileTestJava.options.fork = true
		compileTestJava.options.forkOptions.executable = "${jdk}/bin/javac"
		compileTestJava.options.bootClasspath=fileTree(include: ['*.jar'], dir: "${jdk}/jre/lib").join(File.pathSeparator)
		compileTestJava.options.extensionDirs = "${jdk}/jre/lib/ext/"
	}
	if (props!=null && props.containsKey('artifactory_contextUrl'))
		artifactory_Url="${artifactory_contextUrl}"	
	if (props!=null && props.containsKey('artifactory_user'))
		user="${artifactory_user}"	
	if (props!=null && props.containsKey('artifactory_password'))
		pwd="${artifactory_password}"	
}

eclipse {
    classpath {
       downloadSources=true
    }
}

      
repositories {


   	maven {
       		url "${artifactory_Url}/gradle-release"
       		if (user!="")
       		{
	       		credentials {
	              username "${artifactory_user}"
	              password "${artifactory_password}"
	            }
	         }
   	} 
}

dependencies {
     testCompile 'org.testng:testng:6.13.1'
     compile(group:'com.distrimind.util', name: 'Utils', version: '3.14.5')
     testCompile(group:'org.hsqldb', name: 'hsqldb', version: '2.3.4')
     testCompile(group:'org.apache.derby', name: 'derby', version: '10.11.1.1')
}

allprojects {
	group='com.distrimind.ood'
    repositories {
        jcenter() 
    }
}

sourceCompatibility = 1.7
targetCompatibility=1.7
version='2.0.0-Beta80'

task generateVersionsFile(type:JavaExec, dependsOn: classes) {
  def versionBuildFile = file('src/main/resources/com/distrimind/ood/build.txt')
    
    /*Wrapping inside a method avoids auto incrementing on every gradle task run. Now it runs only when we build apk*/
    if (versionBuildFile.canRead())
    {
    	def line  
    	versionBuildFile.withReader { line = it.readLine() } 
		def buildNumber =line.toInteger()+1
		versionBuildFile.withWriter { out ->
	    	out.println buildNumber
		}
	}
	else {
		versionBuildFile.withWriter { out ->
	    	out.println 1
		}
	}
	
   main = 'com.distrimind.ood.OOD'
   classpath = sourceSets.main.runtimeClasspath
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
    from "../LICENSE"
    from "../versions.html"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
    from "../LICENSE"
    from "../versions.html"
}

artifacts {
    archives sourcesJar
    archives javadocJar
}



jar{
	dependsOn generateVersionsFile
    manifest {
        attributes('Implementation-Title': project.name,
                   'Implementation-Version': project.version)
    }
    from "../LICENSE"
    from "../versions.html"

}





test {

     // enable TestNG support (default is JUnit)
   	useTestNG
   	{
   		suites 'src/test/java/com/distrimind/ood/database/AllTestsNG.xml'
   	}

   // set heap size for the test JVM(s)
   minHeapSize = "256m"
   maxHeapSize = "2g"
 }

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            
        }
    }
    repositories {
        maven {
            credentials {
              username "${user}"
              password "${pwd}"
            }
            url "${artifactory_Url}/DistriMind-Public"
        }
    }
}




